@page "/ListadoRegistros"
@using Tarea_9.Data
@inject VacunadosServices service
@inject ExportService ExportService
@inject Microsoft.JSInterop.IJSRuntime js
@using System.IO;

<div>
    <h2 class="text-center"><strong>Listado de Vacunados en casa</strong></h2>
    <br />
    <table class="table table-bordered table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Cedula</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Teléfono</th>
                <th>Email</th>
                <th>Fecha de Nacimiento</th>
                <th>Tipo de Sangre</th>
                <th>Provincia</th>
                <th>Direccion</th>
                <th>Latitud</th>
                <th>Longitud</th>
                <th>COVID-19</th>
                <th>Justificación</th>
                <th>Accion</th>
            </tr>
        </thead>
        <tbody>
            @if (Vacunados.Any())
            {
                @foreach (var Vacun in Vacunados)
                {
                    <tr>
                        <td>@Vacun.Cedula</td>
                        <td>@Vacun.Nombre</td>
                        <td>@Vacun.Apellido</td>
                        <td>@Vacun.Teléfono</td>
                        <td>@Vacun.Email</td>
                        <td>@Vacun.Fecha</td>
                        <td>@Vacun.TipoDeSangre</td>
                        <td>@Vacun.Provincia</td>
                        <td>@Vacun.Direccion</td>
                        <td>@Vacun.Latitud</td>
                        <td>@Vacun.Longitud</td>
                        <td>@Vacun.COVID</td>
                        <td>@Vacun.Justificacion</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@code {
    //Metodos para manejar la Base de Datos
    List<Vacunados> Vacunados = new List<Vacunados>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshVacunados();
    }

    /*protected async Task ExportToPdf()
    {
      using (MemoryStream memory = ExportService.CreatePdf(vacuna))
      {
          await js.SaveAs("Sample.pdf" , memory.ToArray());
      }
    }*/

    private async Task RefreshVacunados()
    {
        Vacunados = await service.GetVacunadosAsync();
    }

    public Vacunados NewVacunados { get; set; } = new Vacunados();
    private async Task AddNewVacunados()
    {
        await service.AddVacunadosAsync(NewVacunados);
        NewVacunados = new Vacunados();
        await RefreshVacunados();
    }

    Vacunados UpdateVacunados = new Vacunados();
    private void SetVacunadosForUpdate(Vacunados Vacunado)
    {
        UpdateVacunados = Vacunado;
    }

    private async Task UpdateVacunadosData()
    {
        await service.UpdateVacunadosAsync(UpdateVacunados);
        await RefreshVacunados();
    }

    private async Task DeleteVacunados(Vacunados Vacunado)
    {
        await service.DeleteVacunadosAsync(Vacunado);
        await RefreshVacunados();
    }

}
